class c extends Error{constructor(e,r){super(e),this.code=r,this.name="GitAuthError"}}function h(n=32){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let r="";for(let t=0;t<n;t++)r+=e.charAt(Math.floor(Math.random()*e.length));return r}function d(n){try{const e=new URL(n),r=e.searchParams.get("code"),t=e.searchParams.get("state"),s=e.searchParams.get("error");return{code:r||void 0,state:t||void 0,error:s||void 0}}catch{return{}}}class l{constructor(e,r){this.provider=e,this.config=r}async startAuth(e={}){const r=e.scopes||this.config.scopes||this.provider.defaultScopes,t=e.state||h();return this.provider.buildAuthUrl({clientId:this.config.clientId,redirectUri:this.config.redirectUri,scopes:r,state:t})}async handleCallback(e,r){if(!e)throw new c("Authorization code is required","MISSING_CODE");const t=await this.provider.exchangeCodeForToken(e,{clientId:this.config.clientId,clientSecret:this.config.clientSecret,redirectUri:this.config.redirectUri,code:e}),s=await this.provider.getUserInfo(t.access_token);return{accessToken:t.access_token,refreshToken:t.refresh_token,tokenType:t.token_type,expiresIn:t.expires_in,scope:t.scope,user:s,platform:this.provider.name.toLowerCase(),createdAt:Date.now()}}async getUserInfo(e){return await this.provider.getUserInfo(e)}async validateToken(e){try{return await this.provider.getUserInfo(e),!0}catch{return!1}}}class u{constructor(e){this.customFetch=e?.httpClient?.fetch,this.tokenRequestMethod=e?.tokenRequestMethod||"body"}async makeRequest(e,r){return(this.customFetch||fetch)(e,r)}buildTokenRequestParams(e,r){const t=new URLSearchParams;return t.append("grant_type","authorization_code"),t.append("client_id",e.clientId),e.clientSecret&&t.append("client_secret",e.clientSecret),t.append("code",r),t.append("redirect_uri",e.redirectUri),t}buildAuthUrl(e){const r={client_id:e.clientId,redirect_uri:e.redirectUri,scope:e.scopes.join(" "),state:e.state,response_type:"code"};return`${this.authUrl}?${Object.entries(r).map(([t,s])=>`${encodeURIComponent(t)}=${encodeURIComponent(s)}`).join("&")}`}async exchangeCodeForToken(e,r){const t=this.buildTokenRequestParams(r,e);let s=this.tokenUrl,i="";this.tokenRequestMethod==="url"?s=`${this.tokenUrl}?${t.toString()}`:i=t.toString();const a=await this.makeRequest(s,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"},body:i});if(!a.ok)throw new Error(`Token exchange failed: ${a.statusText}`);const o=await a.json();if(o.error)throw new Error(`${this.name} error: ${o.error_description||o.error}`);return{access_token:o.access_token,refresh_token:o.refresh_token,token_type:o.token_type||"bearer",expires_in:o.expires_in||0,scope:o.scope||""}}}class p extends u{constructor(){super(...arguments),this.name="GitHub",this.authUrl="https://github.com/login/oauth/authorize",this.tokenUrl="https://github.com/login/oauth/access_token",this.userInfoUrl="https://api.github.com/user",this.defaultScopes=["repo","user"]}async getUserInfo(e){const r=await this.makeRequest(this.userInfoUrl,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(!r.ok)throw new Error(`Failed to get user info: ${r.statusText}`);const t=await r.json();return{id:t.id,login:t.login,name:t.name,email:t.email,avatarUrl:t.avatar_url,htmlUrl:t.html_url}}}export{p as G,l as a,h as g,d as p};
